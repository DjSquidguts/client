[{"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/index.js":"1","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/reportWebVitals.js":"2","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/App.js":"3","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Login.js":"4","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/Hooks/useLocalStorage.js":"5","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Dashboard.js":"6","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Sidebar.js":"7","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Conversations.js":"8","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Contacts.js":"9","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/NewConversationModal.js":"10","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/NewContactModal.js":"11","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/contexts/ContactsProvider.js":"12","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/contexts/ConversationsProvider.js":"13","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/OpenConversation.js":"14","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/contexts/SocketProvider.js":"15"},{"size":257,"mtime":1639500581193,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1638892472342,"results":"18","hashOfConfig":"19"},{"size":728,"mtime":1639537068955,"results":"20","hashOfConfig":"17"},{"size":904,"mtime":1638928431821,"results":"21","hashOfConfig":"17"},{"size":597,"mtime":1638932866593,"results":"22","hashOfConfig":"17"},{"size":602,"mtime":1639501666539,"results":"23","hashOfConfig":"17"},{"size":2362,"mtime":1639504140583,"results":"24","hashOfConfig":"17"},{"size":695,"mtime":1639270292885,"results":"25","hashOfConfig":"17"},{"size":394,"mtime":1639163544502,"results":"26","hashOfConfig":"17"},{"size":1607,"mtime":1639164835509,"results":"27","hashOfConfig":"17"},{"size":990,"mtime":1638991927603,"results":"28","hashOfConfig":"17"},{"size":651,"mtime":1638992183471,"results":"29","hashOfConfig":"17"},{"size":3417,"mtime":1639428802040,"results":"30","hashOfConfig":"17"},{"size":2464,"mtime":1639422125714,"results":"31","hashOfConfig":"17"},{"size":572,"mtime":1639540100383,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"8l65lq",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1gk7eee",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"35"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/index.js",[],["70","71"],"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/reportWebVitals.js",[],["72","73"],"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/App.js",[],"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Login.js",[],"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/Hooks/useLocalStorage.js",[],"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Dashboard.js",["74"],"import React from \"react\";\nimport Conversations from \"./Conversations\";\nimport Sidebar from \"./Sidebar\";\nimport OpenConversation from \"./OpenConversation\";\nimport { useConversations } from \"../contexts/ConversationsProvider\";\n\nexport default function Dashboard({ id }) {\n  const { selectedConversation } = useConversations();\n\n  return (\n    <div class=\"d-inline-block flex-fill\">\n      <div class=\"d-flex\">\n        <div className=\"d-flex\" style={{ height: \"100vh\" }}>\n          <Sidebar id={id} />\n          {selectedConversation && <OpenConversation />}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Sidebar.js",["75"],"import React, { useState } from \"react\";\nimport { Tab, Nav, TabContainer, Button, Modal } from \"react-bootstrap\";\nimport Conversations from \"./Conversations\";\nimport Contacts from \"./Contacts\";\nimport NewConversationModal from \"./NewConversationModal\";\nimport NewContactModal from \"./NewContactModal\";\n\nconst CONVERSATION_KEY = \"conversations\";\nconst CONTACTS_KEY = \"contacts\";\n\nexport default function Sidebar({ id }) {\n  const [activeKey, setActiveKey] = useState(CONVERSATION_KEY);\n  const [modalOpen, setModalOpen] = useState(false);\n  const conversationsOpen = activeKey === CONVERSATION_KEY;\n\n  function closeModal() {\n    setModalOpen(false);\n  }\n\n  return (\n    <div className=\"\">\n      <img\n        src=\"2chat.jpg\"\n        class=\"img-thumbnail\"\n        alt=\"Hollywood Sign on The Hill\"\n        width=\"100px\"\n      />\n      <button\n        type=\"button\"\n        class=\"btn btn-outline-primary\"\n        data-mdb-ripple-color=\"dark\"\n      >\n        About Us\n      </button>\n      <div style={{ width: \"250px\" }} className=\"d-flex flex-column border\">\n        <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\n          <Nav variant=\"tabs\" className=\"justify-content-center\">\n            <Nav.Item>\n              <Nav.Link eventKey={CONVERSATION_KEY}>Conversations</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\n            </Nav.Item>\n          </Nav>\n          <Tab.Content className=\"overflow-auto flex-grow-1 border-right\">\n            <Tab.Pane eventKey={CONVERSATION_KEY}>\n              <Conversations />\n            </Tab.Pane>\n            <Tab.Pane eventKey={CONTACTS_KEY}>\n              <Contacts />\n            </Tab.Pane>\n          </Tab.Content>\n          <div className=\"p-2 border-top border-right small\">\n            Your Id: <span className=\"text-muted\">{id}</span>\n          </div>\n          <Button onClick={() => setModalOpen(true)} className=\"rounded-3\">\n            New {conversationsOpen ? \"Conversation\" : \"Contact\"}\n          </Button>\n        </Tab.Container>\n\n        <Modal show={modalOpen} onHide={closeModal}>\n          {conversationsOpen ? (\n            <NewConversationModal closeModal={closeModal} />\n          ) : (\n            <NewContactModal closeModal={closeModal} />\n          )}\n        </Modal>\n      </div>\n    </div>\n  );\n}\n","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Conversations.js",[],"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/Contacts.js",[],"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/NewConversationModal.js",["76"],"import React, { useState } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport Contacts from \"./Contacts\";\nimport { useContacts } from \"../contexts/ContactsProvider\";\nimport { useConversations } from \"../contexts/ConversationsProvider\";\n\nexport default function NewConversationModal({ closeModal }) {\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n  const { contacts } = useContacts();\n  const { createConversation } = useConversations();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    createConversation(selectedContactIds);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    setSelectedContactIds((previousSelectedContactIds) => {\n      if (previousSelectedContactIds.includes(contactId)) {\n        return previousSelectedContactIds.filter((prevId) => {\n          return contactId !== prevId;\n        });\n      } else {\n        return [...previousSelectedContactIds, contactId];\n      }\n    });\n  }\n  return (\n    <>\n      <Modal.Header closeButton>Create Conversation</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          {contacts.map((contact) => (\n            <Form.Group controlId={contact.id} key={contact.id}>\n              <Form.Check\n                type=\"checkbox\"\n                value={selectedContactIds.includes(contact.id)}\n                label={contact.name}\n                onChange={() => handleCheckboxChange(contact.id)}\n              />\n            </Form.Group>\n          ))}\n          <Button type=\"submit\">Create</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/NewContactModal.js",[],"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/contexts/ContactsProvider.js",["77"],"import React, { useContext } from \"react\";\nimport Contacts from \"../components/Contacts\";\nimport useLocalStorage from \"../Hooks/useLocalStorage\";\n\nconst ContactsContext = React.createContext();\n\nexport function useContacts() {\n  return useContext(ContactsContext);\n}\n\nexport function ContactsProvider({ children }) {\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\n\n  function createContact(id, name) {\n    setContacts((prevContacts) => {\n      return [...prevContacts, { id, name }];\n    });\n  }\n\n  return (\n    <ContactsContext.Provider value={{ contacts, createContact }}>\n      {children}\n    </ContactsContext.Provider>\n  );\n}\n","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/contexts/ConversationsProvider.js",["78"],"import React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport Contacts from \"../components/Contacts\";\nimport useLocalStorage from \"../Hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useSocket } from \"./SocketProvider\";\n\nconst ConversationsContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage(\n    \"conversations\",\n    []\n  );\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const { contacts } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations((prevConversations) => {\n      return [...prevConversations, { recipients, messages: [] }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(\n    ({ recipients, text, sender }) => {\n      setConversations((prevConversations) => {\n        let madeChange = false;\n        const newMessage = { sender, text };\n        const newConversations = prevConversations.map((conversation) => {\n          if (arrayEquality(conversation.recipients, recipients)) {\n            madeChange = true;\n            return {\n              ...conversation,\n              messages: [...conversation.messages, newMessage],\n            };\n          }\n          return conversation;\n        });\n\n        if (madeChange) {\n          return newConversations;\n        } else {\n          return [...prevConversations, { recipients, messages: [newMessage] }];\n        }\n      });\n    },\n    [setConversations]\n  );\n\n  useEffect(() => {\n    if (socket == null) return;\n\n    socket.on(\"receive-message\", addMessageToConversation);\n\n    return () => socket.off(\"receive-message\");\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, text) {\n    socket.emit(\"send-message\", { recipients, text });\n    addMessageToConversation({ recipients, text, sender: id });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map((recipient) => {\n      const contact = contacts.find((contact) => {\n        return contact.id === recipient;\n      });\n      const name = (contact && contact.name) || recipient;\n      return { id: recipient, name };\n    });\n\n    const messages = conversation.messages.map((message) => {\n      const contact = contacts.find((contact) => {\n        return contact.id === message.sender;\n      });\n      const name = (contact && contact.name) || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message, senderName: name, fromMe };\n    });\n\n    const selected = index === selectedConversationIndex;\n    return { ...conversation, messages, recipients, selected };\n  });\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation,\n  };\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  );\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n\n  a.sort();\n  b.sort();\n\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n","/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/OpenConversation.js",[],"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/contexts/SocketProvider.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"79","replacedBy":"83"},{"ruleId":"81","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":2,"column":8,"nodeType":"87","messageId":"88","endLine":2,"endColumn":21},{"ruleId":"85","severity":1,"message":"89","line":2,"column":20,"nodeType":"87","messageId":"88","endLine":2,"endColumn":32},{"ruleId":"85","severity":1,"message":"90","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":16},{"ruleId":"85","severity":1,"message":"90","line":2,"column":8,"nodeType":"87","messageId":"88","endLine":2,"endColumn":16},{"ruleId":"85","severity":1,"message":"90","line":2,"column":8,"nodeType":"87","messageId":"88","endLine":2,"endColumn":16},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],["91"],["92"],"no-unused-vars","'Conversations' is defined but never used.","Identifier","unusedVar","'TabContainer' is defined but never used.","'Contacts' is defined but never used.","no-global-assign","no-unsafe-negation"]