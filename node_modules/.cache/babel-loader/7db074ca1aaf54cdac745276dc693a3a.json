{"ast":null,"code":"var _jsxFileName = \"/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/NewConversationModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport Contacts from \"./Contacts\";\nimport { useContacts } from \"../contexts/ContactsProvider\";\nimport { useConversations } from \"../contexts/ConversationsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function NewConversationModal(_ref) {\n  _s();\n\n  let {\n    closeModal\n  } = _ref;\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n  const {\n    contacts\n  } = useContacts();\n  const {\n    createConversation\n  } = useConversations();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    createConversation(selectedContactIds);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    selectedContactIds(previousSelectedContactIds => {\n      if (previousSelectedContactIds.includes(contactId)) {\n        return previousSelectedContactIds.filter(prevId => {\n          return contactId !== prevId;\n        });\n      } else {\n        return [...previousSelectedContactIds, contactId];\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: \"Create Conversation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [contacts.map(contact => /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: contact.id,\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            value: selectedContactIds.include(contact.id),\n            label: contact.name,\n            onChange: () => handleCheckboxChange(contact.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this)\n        }, contact.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(NewConversationModal, \"vQmONcecoWX1cwhaThpVMl7yKI4=\", false, function () {\n  return [useContacts, useConversations];\n});\n\n_c = NewConversationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewConversationModal\");","map":{"version":3,"sources":["/Users/keyinstudent/REACT-JS-Projects/wattaya-app/client/src/components/NewConversationModal.js"],"names":["React","useState","Modal","Form","Button","Contacts","useContacts","useConversations","NewConversationModal","closeModal","selectedContactIds","setSelectedContactIds","contacts","createConversation","handleSubmit","e","preventDefault","handleCheckboxChange","contactId","previousSelectedContactIds","includes","filter","prevId","map","contact","id","include","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,iBAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;;;AAEA,eAAe,SAASC,oBAAT,OAA8C;AAAA;;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AAC3D,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAeN,WAAW,EAAhC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAyBN,gBAAgB,EAA/C;;AAEA,WAASO,YAAT,CAAsBC,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,CAACC,cAAF;AAEAH,IAAAA,kBAAkB,CAACH,kBAAD,CAAlB;AACAD,IAAAA,UAAU;AACX;;AAED,WAASQ,oBAAT,CAA8BC,SAA9B,EAAyC;AACvCR,IAAAA,kBAAkB,CAAES,0BAAD,IAAgC;AACjD,UAAIA,0BAA0B,CAACC,QAA3B,CAAoCF,SAApC,CAAJ,EAAoD;AAClD,eAAOC,0BAA0B,CAACE,MAA3B,CAAmCC,MAAD,IAAY;AACnD,iBAAOJ,SAAS,KAAKI,MAArB;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACL,eAAO,CAAC,GAAGH,0BAAJ,EAAgCD,SAAhC,CAAP;AACD;AACF,KARiB,CAAlB;AASD;;AACD,sBACE;AAAA,4BACE,QAAC,KAAD,CAAO,MAAP;AAAc,MAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD,CAAO,IAAP;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEJ,YAAhB;AAAA,mBACGF,QAAQ,CAACW,GAAT,CAAcC,OAAD,iBACZ,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAEA,OAAO,CAACC,EAA/B;AAAA,iCACE,QAAC,IAAD,CAAM,KAAN;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,KAAK,EAAEf,kBAAkB,CAACgB,OAAnB,CAA2BF,OAAO,CAACC,EAAnC,CAFT;AAGE,YAAA,KAAK,EAAED,OAAO,CAACG,IAHjB;AAIE,YAAA,QAAQ,EAAE,MAAMV,oBAAoB,CAACO,OAAO,CAACC,EAAT;AAJtC;AAAA;AAAA;AAAA;AAAA;AADF,WAAwCD,OAAO,CAACC,EAAhD;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,eAWE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAoBD;;GA3CuBjB,oB;UAEDF,W,EACUC,gB;;;KAHTC,oB","sourcesContent":["import React, { useState } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport Contacts from \"./Contacts\";\nimport { useContacts } from \"../contexts/ContactsProvider\";\nimport { useConversations } from \"../contexts/ConversationsProvider\";\n\nexport default function NewConversationModal({ closeModal }) {\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n  const { contacts } = useContacts();\n  const { createConversation } = useConversations();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    createConversation(selectedContactIds);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    selectedContactIds((previousSelectedContactIds) => {\n      if (previousSelectedContactIds.includes(contactId)) {\n        return previousSelectedContactIds.filter((prevId) => {\n          return contactId !== prevId;\n        });\n      } else {\n        return [...previousSelectedContactIds, contactId];\n      }\n    });\n  }\n  return (\n    <>\n      <Modal.Header closeButton>Create Conversation</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          {contacts.map((contact) => (\n            <Form.Group controlId={contact.id} key={contact.id}>\n              <Form.Check\n                type=\"checkbox\"\n                value={selectedContactIds.include(contact.id)}\n                label={contact.name}\n                onChange={() => handleCheckboxChange(contact.id)}\n              />\n            </Form.Group>\n          ))}\n          <Button type=\"submit\">Create</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}